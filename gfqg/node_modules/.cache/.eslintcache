[{"/home/sai/Desktop/open-source/gfqg/gfqg/src/index.js":"1","/home/sai/Desktop/open-source/gfqg/gfqg/src/App.js":"2","/home/sai/Desktop/open-source/gfqg/gfqg/src/reportWebVitals.js":"3","/home/sai/Desktop/open-source/gfqg/gfqg/src/components/thankYou.js":"4","/home/sai/Desktop/open-source/gfqg/gfqg/src/components/keyword.js":"5"},{"size":500,"mtime":1636919142485,"results":"6","hashOfConfig":"7"},{"size":436,"mtime":1638527638598,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1636919142489,"results":"9","hashOfConfig":"7"},{"size":161,"mtime":1638527593486,"results":"10","hashOfConfig":"7"},{"size":8672,"mtime":1639418126315,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"m6ye4k",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/sai/Desktop/open-source/gfqg/gfqg/src/index.js",[],["24","25"],"/home/sai/Desktop/open-source/gfqg/gfqg/src/App.js",[],"/home/sai/Desktop/open-source/gfqg/gfqg/src/reportWebVitals.js",[],"/home/sai/Desktop/open-source/gfqg/gfqg/src/components/thankYou.js",[],"/home/sai/Desktop/open-source/gfqg/gfqg/src/components/keyword.js",["26"],"import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Input from \"@mui/material/Input\";\nimport { useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { Select, MenuItem } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nconst ariaLabel = { \"aria-label\": \"description\" };\nexport default function Inputs(props) {\n  const { history } = props;\n  const times = [];\n  const days = [\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\",\n    \"saturday\",\n    \"sunday\",\n  ];\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n  for (let i = 0; i <= 21; i++) {\n    let x = i.toString();\n    if (x.length < 2) x = \"0\" + x;\n    x += \":00\";\n    times.push(x);\n  }\n\n  const [keyword, setKeyword] = useState(\"\");\n  const [approx, setApprox] = useState(10);\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState({});\n  const [email, setEmail] = useState(\"abc@gmail.com\");\n  const [day, setDay] = useState(\"monday\");\n  const [time, setTime] = useState(\"00:00\");\n  const findOptions = async (word) => {\n    return new Promise(async (resolve, reject) => {\n      fetch(`https://api.datamuse.com/words?ml=${word}`)\n        .then((res) => res.json())\n        .then(async (data) => {\n          resolve([data[0].word, data[1].word, data[2].word]);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n  const fetchQuestion = () => {\n    setLoading(true);\n    fetch(\n      `http://localhost:5000/generate_from_keyword?query=${keyword}&max_questions=${approx}`\n    )\n      .then((res) => res.json())\n      .then(async (data) => {\n        let questions = {};\n        data = await Promise.all(\n          data.map(async (d, index) => {\n            questions[index] = {\n              question: d.pop(),\n              answers: d[0],\n              selected: \"null\",\n              options: shuffle([...(await findOptions(d[0])), d[0]]),\n            };\n            return d;\n          })\n        );\n        setQuestions(questions);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  };\n\n  const submitAnswers = async () => {\n    let response = {\n      question_data: [],\n      revision_plan: {\n        day: day,\n        time: time,\n      },\n      email: email,\n    };\n    await Promise.all(\n      Object.keys(questions).map((quest) => {\n        let question = questions[quest];\n        if (\n          JSON.stringify(question.answers) !== JSON.stringify(question.selected)\n        ) {\n          response.question_data.push({\n            question: question.question,\n            correct_answer: question.answers.toString(),\n            wrong_answer: question.selected.toString(),\n          });\n        }\n        return question;\n      })\n    );\n    console.log(response);\n    fetch(\"http://localhost:5000/revisionEmail\", {\n      method: \"POST\",\n      body: JSON.stringify(response),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => {\n        history.push(\"/thanks\");\n      })\n      .catch((err) => alert(\"Some Error Occured Try Again\" + err));\n  };\n  return (\n    <>\n      {Object.keys(questions).length < 1 && (\n        <Box\n          component=\"form\"\n          sx={{\n            \"& > :not(style)\": { m: 1 },\n            justifyContent: \"center\",\n            alignContent: \"center\",\n            width: \"100%\",\n          }}\n          noValidate\n          autoComplete=\"off\"\n        >\n          <Input\n            defaultValue={keyword}\n            onChange={(e) => setKeyword(e.target.value)}\n            placeholder={\n              'Place keyword to Search example Delhi the capita\"Hello world\" l of India'\n            }\n            inputProps={ariaLabel}\n            sx={{ width: \"50%\" }}\n          />\n          <Input\n            onChange={(e) => setApprox(e.target.value)}\n            type={\"number\"}\n            placeholder={\"Approx questions to generate\"}\n            inputProps={ariaLabel}\n            sx={{ marginLeft: 10 }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={fetchQuestion}\n            disabled={loading}\n          >\n            Submit\n          </Button>\n        </Box>\n      )}\n      {Object.keys(questions).length > 0 && (\n        <Grid container alignItems=\"center\" justifyContent=\"center\">\n          <h1>\n            Answer these questions and submit the answers with your email and\n            time scheduled for revision.\n          </h1>\n          <Grid\n            item\n            xs={8}\n            sm={8}\n            lg={8}\n            md={8}\n            sx={{ height: \"90vh\", width: \"100%\", overflowY: \"scroll\" }}\n          >\n            {Object.keys(questions).map((index) => {\n              return (\n                <>\n                  <p>\n                    Q.{1 + parseInt(index)}. {questions[index].question}\n                  </p>\n                  <br />\n                  <p>1. {questions[index].options[0]}</p>{\" \"}\n                  <p>2. {questions[index].options[1]}</p>{\" \"}\n                  <p>3. {questions[index].options[2]}</p>{\" \"}\n                  <p>4. {questions[index].options[3]}</p> <br />\n                  <Input\n                    onChange={(e) => {\n                      let qna = questions;\n                      qna[index].selected = e.target.value.toLowerCase();\n                    }}\n                    placeholder={\"Enter Your answer.\"}\n                    inputProps={ariaLabel}\n                    sx={{ marginLeft: 10, width: \"80%\" }}\n                  />\n                  <br />\n                </>\n              );\n            })}\n          </Grid>\n          <Grid\n            container\n            xs={12}\n            sm={12}\n            lg={12}\n            md={12}\n            item\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={2} sm={2} lg={2} md={2}>\n              <Input\n                onChange={(e) => setEmail(e.target.value)}\n                type={\"email\"}\n                placeholder={\"johndoe@example.com\"}\n                inputProps={ariaLabel}\n                sx={{ marginLeft: 10 }}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={1}\n              sm={1}\n              lg={1}\n              md={1}\n              container\n              justifyContent=\"flex-end\"\n            >\n              <Select\n                labelId=\"demo-simple-select-label2\"\n                id=\"demo-simple-select2\"\n                value={day}\n                label={\"day\"}\n                onChange={(e) => setDay(e.target.value)}\n              >\n                {days.map((d) => {\n                  return (\n                    <MenuItem value={d} selected={d === day}>\n                      {\" \"}\n                      {d}{\" \"}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </Grid>\n            <Grid\n              item\n              xs={1}\n              sm={1}\n              lg={1}\n              md={1}\n              container\n              justifyContent=\"flex-start\"\n            >\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={time}\n                label={\"time\"}\n                onChange={(e) => setTime(e.target.value)}\n              >\n                {times.map((t) => {\n                  return (\n                    <MenuItem value={t} selected={t === time}>\n                      {\" \"}\n                      {t}{\" \"}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </Grid>\n            <Grid\n              item\n              xs={1}\n              sm={1}\n              lg={1}\n              md={1}\n              container\n              justifyContent=\"flex-start\"\n            >\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={submitAnswers}\n              >\n                Submit Answers\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n}\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":26,"column":25,"nodeType":"33","messageId":"34","endLine":26,"endColumn":27},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]