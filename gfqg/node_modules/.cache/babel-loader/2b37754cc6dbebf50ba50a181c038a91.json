{"ast":null,"code":"var _jsxFileName = \"/home/sai/Desktop/open-source/gfqg/gfqg/src/components/keyword.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Input from \"@mui/material/Input\";\nimport { useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { Select, MenuItem } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ariaLabel = {\n  \"aria-label\": \"description\"\n};\nexport default function Inputs(props) {\n  _s();\n\n  const {\n    history\n  } = props;\n  const times = [];\n  const days = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"];\n\n  for (let i = 0; i <= 21; i++) {\n    let x = i.toString();\n    if (x.length < 2) x = \"0\" + x;\n    x += \":00\";\n    times.push(x);\n  }\n\n  const [keyword, setKeyword] = useState(\"\");\n  const [approx, setApprox] = useState(10);\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState({});\n  const [email, setEmail] = useState(\"abc@gmail.com\");\n  const [day, setDay] = useState(\"monday\");\n  const [time, setTime] = useState(\"00:00\");\n\n  const fetchQuestion = () => {\n    setLoading(true);\n    fetch(`http://localhost:5000/generate_from_keyword?query=${keyword}&max_questions=${approx}`).then(res => res.json()).then(async data => {\n      let questions = {};\n      data = await Promise.all(data.map((d, index) => {\n        questions[index] = {\n          question: d.pop(),\n          answers: d.map(str => str.toLowerCase()),\n          selected: Array.from({\n            length: d.length\n          }, (v, k) => \"null\")\n        };\n        return d;\n      }));\n      setQuestions(questions);\n      setLoading(false);\n    }).catch(err => {\n      setLoading(false);\n    });\n  };\n\n  const submitAnswers = async () => {\n    let response = {\n      question_data: [],\n      revision_plan: {\n        day: day,\n        time: time\n      },\n      email: email\n    };\n    await Promise.all(Object.keys(questions).map(quest => {\n      let question = questions[quest];\n\n      if (JSON.stringify(question.answers) !== JSON.stringify(question.selected)) {\n        response.question_data.push({\n          question: question.question,\n          correct_answer: question.answers.toString(),\n          wrong_answer: question.selected.toString()\n        });\n      }\n\n      return question;\n    }));\n    console.log(response);\n    fetch(\"http://localhost:5000/revisionEmail\", {\n      method: \"POST\",\n      body: JSON.stringify(response),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(res => {\n      history.push(\"/thanks\");\n    }).catch(err => alert(\"Some Error Occured Try Again\" + err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [Object.keys(questions).length < 1 && /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      sx: {\n        \"& > :not(style)\": {\n          m: 1\n        },\n        justifyContent: \"center\",\n        alignContent: \"center\",\n        width: \"100%\"\n      },\n      noValidate: true,\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        defaultValue: keyword,\n        onChange: e => setKeyword(e.target.value),\n        placeholder: 'Place keyword to Search example Delhi the capita\"Hello world\" l of India',\n        inputProps: ariaLabel,\n        sx: {\n          width: \"50%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        onChange: e => setApprox(e.target.value),\n        type: \"number\",\n        placeholder: \"Approx questions to generate\",\n        inputProps: ariaLabel,\n        sx: {\n          marginLeft: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: fetchQuestion,\n        disabled: loading,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), Object.keys(questions).length > 0 && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Answer these questions and submit the answers with your email and time scheduled for revision.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 8,\n        sm: 8,\n        lg: 8,\n        md: 8,\n        sx: {\n          height: \"90vh\",\n          width: \"100%\",\n          overflowY: \"scroll\"\n        },\n        children: Object.keys(questions).map(index => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Q.\", 1 + parseInt(index), \". \", questions[index].question]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              onChange: e => {\n                let qna = questions;\n                qna[index].selected = e.target.value.toLowerCase().split(\",\");\n                setQuestions(qna);\n              },\n              placeholder: \"Enter Your answer.\",\n              inputProps: ariaLabel,\n              sx: {\n                marginLeft: 10,\n                width: \"80%\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        xs: 12,\n        sm: 12,\n        lg: 12,\n        md: 12,\n        item: true,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2,\n          sm: 2,\n          lg: 2,\n          md: 2,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            onChange: e => setEmail(e.target.value),\n            type: \"email\",\n            placeholder: \"johndoe@example.com\",\n            inputProps: ariaLabel,\n            sx: {\n              marginLeft: 10\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1,\n          sm: 1,\n          lg: 1,\n          md: 1,\n          container: true,\n          justifyContent: \"flex-end\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"demo-simple-select-label2\",\n            id: \"demo-simple-select2\",\n            value: day,\n            label: \"day\",\n            onChange: e => setDay(e.target.value),\n            children: days.map(d => {\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: d,\n                selected: d === day,\n                children: [\" \", d, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1,\n          sm: 1,\n          lg: 1,\n          md: 1,\n          container: true,\n          justifyContent: \"flex-start\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"demo-simple-select-label\",\n            id: \"demo-simple-select\",\n            value: time,\n            label: \"time\",\n            onChange: e => setTime(e.target.value),\n            children: times.map(t => {\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: t,\n                selected: t === time,\n                children: [\" \", t, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1,\n          sm: 1,\n          lg: 1,\n          md: 1,\n          container: true,\n          justifyContent: \"flex-start\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: submitAnswers,\n            children: \"Submit Answers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Inputs, \"48q0ljOFQ95N9Yf9dUmSCWM76hw=\");\n\n_c = Inputs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"sources":["/home/sai/Desktop/open-source/gfqg/gfqg/src/components/keyword.js"],"names":["React","Box","Input","useState","Button","Select","MenuItem","Grid","ariaLabel","Inputs","props","history","times","days","i","x","toString","length","push","keyword","setKeyword","approx","setApprox","loading","setLoading","questions","setQuestions","email","setEmail","day","setDay","time","setTime","fetchQuestion","fetch","then","res","json","data","Promise","all","map","d","index","question","pop","answers","str","toLowerCase","selected","Array","from","v","k","catch","err","submitAnswers","response","question_data","revision_plan","Object","keys","quest","JSON","stringify","correct_answer","wrong_answer","console","log","method","body","headers","alert","m","justifyContent","alignContent","width","e","target","value","marginLeft","height","overflowY","parseInt","qna","split","t"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,eAAjC;AACA,SAASC,IAAT,QAAqB,eAArB;;;AACA,MAAMC,SAAS,GAAG;AAAE,gBAAc;AAAhB,CAAlB;AACA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AACA,QAAME,KAAK,GAAG,EAAd;AACA,QAAMC,IAAI,GAAG,CACX,QADW,EAEX,SAFW,EAGX,WAHW,EAIX,UAJW,EAKX,QALW,EAMX,UANW,EAOX,QAPW,CAAb;;AAUA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B,QAAIC,CAAC,GAAGD,CAAC,CAACE,QAAF,EAAR;AACA,QAAID,CAAC,CAACE,MAAF,GAAW,CAAf,EAAkBF,CAAC,GAAG,MAAMA,CAAV;AAClBA,IAAAA,CAAC,IAAI,KAAL;AACAH,IAAAA,KAAK,CAACM,IAAN,CAAWH,CAAX;AACD;;AAED,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACwB,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,eAAD,CAAlC;AACA,QAAM,CAAC0B,GAAD,EAAMC,MAAN,IAAgB3B,QAAQ,CAAC,QAAD,CAA9B;AACA,QAAM,CAAC4B,IAAD,EAAOC,OAAP,IAAkB7B,QAAQ,CAAC,OAAD,CAAhC;;AACA,QAAM8B,aAAa,GAAG,MAAM;AAC1BT,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAU,IAAAA,KAAK,CACF,qDAAoDf,OAAQ,kBAAiBE,MAAO,EADlF,CAAL,CAGGc,IAHH,CAGSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHjB,EAIGF,IAJH,CAIQ,MAAOG,IAAP,IAAgB;AACpB,UAAIb,SAAS,GAAG,EAAhB;AACAa,MAAAA,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CACXF,IAAI,CAACG,GAAL,CAAS,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACrBlB,QAAAA,SAAS,CAACkB,KAAD,CAAT,GAAmB;AACjBC,UAAAA,QAAQ,EAAEF,CAAC,CAACG,GAAF,EADO;AAEjBC,UAAAA,OAAO,EAAEJ,CAAC,CAACD,GAAF,CAAOM,GAAD,IAASA,GAAG,CAACC,WAAJ,EAAf,CAFQ;AAGjBC,UAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAW;AAAElC,YAAAA,MAAM,EAAEyB,CAAC,CAACzB;AAAZ,WAAX,EAAiC,CAACmC,CAAD,EAAIC,CAAJ,KAAU,MAA3C;AAHO,SAAnB;AAKA,eAAOX,CAAP;AACD,OAPD,CADW,CAAb;AAUAhB,MAAAA,YAAY,CAACD,SAAD,CAAZ;AACAD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAlBH,EAmBG8B,KAnBH,CAmBUC,GAAD,IAAS;AACd/B,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KArBH;AAsBD,GAxBD;;AA0BA,QAAMgC,aAAa,GAAG,YAAY;AAChC,QAAIC,QAAQ,GAAG;AACbC,MAAAA,aAAa,EAAE,EADF;AAEbC,MAAAA,aAAa,EAAE;AACb9B,QAAAA,GAAG,EAAEA,GADQ;AAEbE,QAAAA,IAAI,EAAEA;AAFO,OAFF;AAMbJ,MAAAA,KAAK,EAAEA;AANM,KAAf;AAQA,UAAMY,OAAO,CAACC,GAAR,CACJoB,MAAM,CAACC,IAAP,CAAYpC,SAAZ,EAAuBgB,GAAvB,CAA4BqB,KAAD,IAAW;AACpC,UAAIlB,QAAQ,GAAGnB,SAAS,CAACqC,KAAD,CAAxB;;AACA,UACEC,IAAI,CAACC,SAAL,CAAepB,QAAQ,CAACE,OAAxB,MAAqCiB,IAAI,CAACC,SAAL,CAAepB,QAAQ,CAACK,QAAxB,CADvC,EAEE;AACAQ,QAAAA,QAAQ,CAACC,aAAT,CAAuBxC,IAAvB,CAA4B;AAC1B0B,UAAAA,QAAQ,EAAEA,QAAQ,CAACA,QADO;AAE1BqB,UAAAA,cAAc,EAAErB,QAAQ,CAACE,OAAT,CAAiB9B,QAAjB,EAFU;AAG1BkD,UAAAA,YAAY,EAAEtB,QAAQ,CAACK,QAAT,CAAkBjC,QAAlB;AAHY,SAA5B;AAKD;;AACD,aAAO4B,QAAP;AACD,KAZD,CADI,CAAN;AAeAuB,IAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACAvB,IAAAA,KAAK,CAAC,qCAAD,EAAwC;AAC3CmC,MAAAA,MAAM,EAAE,MADmC;AAE3CC,MAAAA,IAAI,EAAEP,IAAI,CAACC,SAAL,CAAeP,QAAf,CAFqC;AAG3Cc,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHkC,KAAxC,CAAL,CAOGpC,IAPH,CAOSC,GAAD,IAAS;AACbzB,MAAAA,OAAO,CAACO,IAAR,CAAa,SAAb;AACD,KATH,EAUGoC,KAVH,CAUUC,GAAD,IAASiB,KAAK,CAAC,iCAAiCjB,GAAlC,CAVvB;AAWD,GApCD;;AAqCA,sBACE;AAAA,eACGK,MAAM,CAACC,IAAP,CAAYpC,SAAZ,EAAuBR,MAAvB,GAAgC,CAAhC,iBACC,QAAC,GAAD;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,EAAE,EAAE;AACF,2BAAmB;AAAEwD,UAAAA,CAAC,EAAE;AAAL,SADjB;AAEFC,QAAAA,cAAc,EAAE,QAFd;AAGFC,QAAAA,YAAY,EAAE,QAHZ;AAIFC,QAAAA,KAAK,EAAE;AAJL,OAFN;AAQE,MAAA,UAAU,MARZ;AASE,MAAA,YAAY,EAAC,KATf;AAAA,8BAWE,QAAC,KAAD;AACE,QAAA,YAAY,EAAEzD,OADhB;AAEE,QAAA,QAAQ,EAAG0D,CAAD,IAAOzD,UAAU,CAACyD,CAAC,CAACC,MAAF,CAASC,KAAV,CAF7B;AAGE,QAAA,WAAW,EACT,0EAJJ;AAME,QAAA,UAAU,EAAEvE,SANd;AAOE,QAAA,EAAE,EAAE;AAAEoE,UAAAA,KAAK,EAAE;AAAT;AAPN;AAAA;AAAA;AAAA;AAAA,cAXF,eAoBE,QAAC,KAAD;AACE,QAAA,QAAQ,EAAGC,CAAD,IAAOvD,SAAS,CAACuD,CAAC,CAACC,MAAF,CAASC,KAAV,CAD5B;AAEE,QAAA,IAAI,EAAE,QAFR;AAGE,QAAA,WAAW,EAAE,8BAHf;AAIE,QAAA,UAAU,EAAEvE,SAJd;AAKE,QAAA,EAAE,EAAE;AAAEwE,UAAAA,UAAU,EAAE;AAAd;AALN;AAAA;AAAA;AAAA;AAAA,cApBF,eA2BE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,KAAK,EAAC,SAFR;AAGE,QAAA,OAAO,EAAE/C,aAHX;AAIE,QAAA,QAAQ,EAAEV,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAuCGqC,MAAM,CAACC,IAAP,CAAYpC,SAAZ,EAAuBR,MAAvB,GAAgC,CAAhC,iBACC,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,UAAU,EAAC,QAA3B;AAAoC,MAAA,cAAc,EAAC,QAAnD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,IAAD;AACE,QAAA,IAAI,MADN;AAEE,QAAA,EAAE,EAAE,CAFN;AAGE,QAAA,EAAE,EAAE,CAHN;AAIE,QAAA,EAAE,EAAE,CAJN;AAKE,QAAA,EAAE,EAAE,CALN;AAME,QAAA,EAAE,EAAE;AAAEgE,UAAAA,MAAM,EAAE,MAAV;AAAkBL,UAAAA,KAAK,EAAE,MAAzB;AAAiCM,UAAAA,SAAS,EAAE;AAA5C,SANN;AAAA,kBAQGtB,MAAM,CAACC,IAAP,CAAYpC,SAAZ,EAAuBgB,GAAvB,CAA4BE,KAAD,IAAW;AACrC,8BACE;AAAA,oCACE;AAAA,+BACK,IAAIwC,QAAQ,CAACxC,KAAD,CADjB,QAC4BlB,SAAS,CAACkB,KAAD,CAAT,CAAiBC,QAD7C;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE,QAAC,KAAD;AACE,cAAA,QAAQ,EAAGiC,CAAD,IAAO;AACf,oBAAIO,GAAG,GAAG3D,SAAV;AACA2D,gBAAAA,GAAG,CAACzC,KAAD,CAAH,CAAWM,QAAX,GAAsB4B,CAAC,CAACC,MAAF,CAASC,KAAT,CACnB/B,WADmB,GAEnBqC,KAFmB,CAEb,GAFa,CAAtB;AAGA3D,gBAAAA,YAAY,CAAC0D,GAAD,CAAZ;AACD,eAPH;AAQE,cAAA,WAAW,EAAE,oBARf;AASE,cAAA,UAAU,EAAE5E,SATd;AAUE,cAAA,EAAE,EAAE;AAAEwE,gBAAAA,UAAU,EAAE,EAAd;AAAkBJ,gBAAAA,KAAK,EAAE;AAAzB;AAVN;AAAA;AAAA;AAAA;AAAA,oBALF,eAiBE;AAAA;AAAA;AAAA;AAAA,oBAjBF;AAAA,0BADF;AAqBD,SAtBA;AARH;AAAA;AAAA;AAAA;AAAA,cALF,eAqCE,QAAC,IAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,EAAE,EAAE,EAFN;AAGE,QAAA,EAAE,EAAE,EAHN;AAIE,QAAA,EAAE,EAAE,EAJN;AAKE,QAAA,EAAE,EAAE,EALN;AAME,QAAA,IAAI,MANN;AAOE,QAAA,cAAc,EAAC,QAPjB;AAQE,QAAA,UAAU,EAAC,QARb;AAAA,gCAUE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,CAAf;AAAkB,UAAA,EAAE,EAAE,CAAtB;AAAyB,UAAA,EAAE,EAAE,CAA7B;AAAgC,UAAA,EAAE,EAAE,CAApC;AAAA,iCACE,QAAC,KAAD;AACE,YAAA,QAAQ,EAAGC,CAAD,IAAOjD,QAAQ,CAACiD,CAAC,CAACC,MAAF,CAASC,KAAV,CAD3B;AAEE,YAAA,IAAI,EAAE,OAFR;AAGE,YAAA,WAAW,EAAE,qBAHf;AAIE,YAAA,UAAU,EAAEvE,SAJd;AAKE,YAAA,EAAE,EAAE;AAAEwE,cAAAA,UAAU,EAAE;AAAd;AALN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF,eAmBE,QAAC,IAAD;AACE,UAAA,IAAI,MADN;AAEE,UAAA,EAAE,EAAE,CAFN;AAGE,UAAA,EAAE,EAAE,CAHN;AAIE,UAAA,EAAE,EAAE,CAJN;AAKE,UAAA,EAAE,EAAE,CALN;AAME,UAAA,SAAS,MANX;AAOE,UAAA,cAAc,EAAC,UAPjB;AAAA,iCASE,QAAC,MAAD;AACE,YAAA,OAAO,EAAC,2BADV;AAEE,YAAA,EAAE,EAAC,qBAFL;AAGE,YAAA,KAAK,EAAEnD,GAHT;AAIE,YAAA,KAAK,EAAE,KAJT;AAKE,YAAA,QAAQ,EAAGgD,CAAD,IAAO/C,MAAM,CAAC+C,CAAC,CAACC,MAAF,CAASC,KAAV,CALzB;AAAA,sBAOGlE,IAAI,CAAC4B,GAAL,CAAUC,CAAD,IAAO;AACf,kCACE,QAAC,QAAD;AAAU,gBAAA,KAAK,EAAEA,CAAjB;AAAoB,gBAAA,QAAQ,EAAEA,CAAC,KAAKb,GAApC;AAAA,2BACG,GADH,EAEGa,CAFH,EAEM,GAFN;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF;AAMD,aAPA;AAPH;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,gBAnBF,eA6CE,QAAC,IAAD;AACE,UAAA,IAAI,MADN;AAEE,UAAA,EAAE,EAAE,CAFN;AAGE,UAAA,EAAE,EAAE,CAHN;AAIE,UAAA,EAAE,EAAE,CAJN;AAKE,UAAA,EAAE,EAAE,CALN;AAME,UAAA,SAAS,MANX;AAOE,UAAA,cAAc,EAAC,YAPjB;AAAA,iCASE,QAAC,MAAD;AACE,YAAA,OAAO,EAAC,0BADV;AAEE,YAAA,EAAE,EAAC,oBAFL;AAGE,YAAA,KAAK,EAAEX,IAHT;AAIE,YAAA,KAAK,EAAE,MAJT;AAKE,YAAA,QAAQ,EAAG8C,CAAD,IAAO7C,OAAO,CAAC6C,CAAC,CAACC,MAAF,CAASC,KAAV,CAL1B;AAAA,sBAOGnE,KAAK,CAAC6B,GAAN,CAAW6C,CAAD,IAAO;AAChB,kCACE,QAAC,QAAD;AAAU,gBAAA,KAAK,EAAEA,CAAjB;AAAoB,gBAAA,QAAQ,EAAEA,CAAC,KAAKvD,IAApC;AAAA,2BACG,GADH,EAEGuD,CAFH,EAEM,GAFN;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF;AAMD,aAPA;AAPH;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,gBA7CF,eAuEE,QAAC,IAAD;AACE,UAAA,IAAI,MADN;AAEE,UAAA,EAAE,EAAE,CAFN;AAGE,UAAA,EAAE,EAAE,CAHN;AAIE,UAAA,EAAE,EAAE,CAJN;AAKE,UAAA,EAAE,EAAE,CALN;AAME,UAAA,SAAS,MANX;AAOE,UAAA,cAAc,EAAC,YAPjB;AAAA,iCASE,QAAC,MAAD;AACE,YAAA,OAAO,EAAC,WADV;AAEE,YAAA,KAAK,EAAC,SAFR;AAGE,YAAA,OAAO,EAAE9B,aAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,gBAvEF;AAAA;AAAA;AAAA;AAAA;AAAA,cArCF;AAAA;AAAA;AAAA;AAAA;AAAA,YAxCJ;AAAA,kBADF;AA2KD;;GArQuB/C,M;;KAAAA,M","sourcesContent":["import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Input from \"@mui/material/Input\";\nimport { useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { Select, MenuItem } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nconst ariaLabel = { \"aria-label\": \"description\" };\nexport default function Inputs(props) {\n  const { history } = props;\n  const times = [];\n  const days = [\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\",\n    \"saturday\",\n    \"sunday\",\n  ];\n\n  for (let i = 0; i <= 21; i++) {\n    let x = i.toString();\n    if (x.length < 2) x = \"0\" + x;\n    x += \":00\";\n    times.push(x);\n  }\n\n  const [keyword, setKeyword] = useState(\"\");\n  const [approx, setApprox] = useState(10);\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState({});\n  const [email, setEmail] = useState(\"abc@gmail.com\");\n  const [day, setDay] = useState(\"monday\");\n  const [time, setTime] = useState(\"00:00\");\n  const fetchQuestion = () => {\n    setLoading(true);\n    fetch(\n      `http://localhost:5000/generate_from_keyword?query=${keyword}&max_questions=${approx}`\n    )\n      .then((res) => res.json())\n      .then(async (data) => {\n        let questions = {};\n        data = await Promise.all(\n          data.map((d, index) => {\n            questions[index] = {\n              question: d.pop(),\n              answers: d.map((str) => str.toLowerCase()),\n              selected: Array.from({ length: d.length }, (v, k) => \"null\"),\n            };\n            return d;\n          })\n        );\n        setQuestions(questions);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  };\n\n  const submitAnswers = async () => {\n    let response = {\n      question_data: [],\n      revision_plan: {\n        day: day,\n        time: time,\n      },\n      email: email,\n    };\n    await Promise.all(\n      Object.keys(questions).map((quest) => {\n        let question = questions[quest];\n        if (\n          JSON.stringify(question.answers) !== JSON.stringify(question.selected)\n        ) {\n          response.question_data.push({\n            question: question.question,\n            correct_answer: question.answers.toString(),\n            wrong_answer: question.selected.toString(),\n          });\n        }\n        return question;\n      })\n    );\n    console.log(response);\n    fetch(\"http://localhost:5000/revisionEmail\", {\n      method: \"POST\",\n      body: JSON.stringify(response),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => {\n        history.push(\"/thanks\");\n      })\n      .catch((err) => alert(\"Some Error Occured Try Again\" + err));\n  };\n  return (\n    <>\n      {Object.keys(questions).length < 1 && (\n        <Box\n          component=\"form\"\n          sx={{\n            \"& > :not(style)\": { m: 1 },\n            justifyContent: \"center\",\n            alignContent: \"center\",\n            width: \"100%\",\n          }}\n          noValidate\n          autoComplete=\"off\"\n        >\n          <Input\n            defaultValue={keyword}\n            onChange={(e) => setKeyword(e.target.value)}\n            placeholder={\n              'Place keyword to Search example Delhi the capita\"Hello world\" l of India'\n            }\n            inputProps={ariaLabel}\n            sx={{ width: \"50%\" }}\n          />\n          <Input\n            onChange={(e) => setApprox(e.target.value)}\n            type={\"number\"}\n            placeholder={\"Approx questions to generate\"}\n            inputProps={ariaLabel}\n            sx={{ marginLeft: 10 }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={fetchQuestion}\n            disabled={loading}\n          >\n            Submit\n          </Button>\n        </Box>\n      )}\n      {Object.keys(questions).length > 0 && (\n        <Grid container alignItems=\"center\" justifyContent=\"center\">\n          <h1>\n            Answer these questions and submit the answers with your email and\n            time scheduled for revision.\n          </h1>\n          <Grid\n            item\n            xs={8}\n            sm={8}\n            lg={8}\n            md={8}\n            sx={{ height: \"90vh\", width: \"100%\", overflowY: \"scroll\" }}\n          >\n            {Object.keys(questions).map((index) => {\n              return (\n                <>\n                  <p>\n                    Q.{1 + parseInt(index)}. {questions[index].question}\n                  </p>\n                  <br />\n                  <Input\n                    onChange={(e) => {\n                      let qna = questions;\n                      qna[index].selected = e.target.value\n                        .toLowerCase()\n                        .split(\",\");\n                      setQuestions(qna);\n                    }}\n                    placeholder={\"Enter Your answer.\"}\n                    inputProps={ariaLabel}\n                    sx={{ marginLeft: 10, width: \"80%\" }}\n                  />\n                  <br />\n                </>\n              );\n            })}\n          </Grid>\n          <Grid\n            container\n            xs={12}\n            sm={12}\n            lg={12}\n            md={12}\n            item\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={2} sm={2} lg={2} md={2}>\n              <Input\n                onChange={(e) => setEmail(e.target.value)}\n                type={\"email\"}\n                placeholder={\"johndoe@example.com\"}\n                inputProps={ariaLabel}\n                sx={{ marginLeft: 10 }}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={1}\n              sm={1}\n              lg={1}\n              md={1}\n              container\n              justifyContent=\"flex-end\"\n            >\n              <Select\n                labelId=\"demo-simple-select-label2\"\n                id=\"demo-simple-select2\"\n                value={day}\n                label={\"day\"}\n                onChange={(e) => setDay(e.target.value)}\n              >\n                {days.map((d) => {\n                  return (\n                    <MenuItem value={d} selected={d === day}>\n                      {\" \"}\n                      {d}{\" \"}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </Grid>\n            <Grid\n              item\n              xs={1}\n              sm={1}\n              lg={1}\n              md={1}\n              container\n              justifyContent=\"flex-start\"\n            >\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={time}\n                label={\"time\"}\n                onChange={(e) => setTime(e.target.value)}\n              >\n                {times.map((t) => {\n                  return (\n                    <MenuItem value={t} selected={t === time}>\n                      {\" \"}\n                      {t}{\" \"}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </Grid>\n            <Grid\n              item\n              xs={1}\n              sm={1}\n              lg={1}\n              md={1}\n              container\n              justifyContent=\"flex-start\"\n            >\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={submitAnswers}\n              >\n                Submit Answers\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}